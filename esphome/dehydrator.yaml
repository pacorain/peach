# Basic food dehydrator plugged into smart plug
#
# This outlet turns off after running for 8 hours.

packages:
  hardware: !include hardware/sonoff_s31.yaml

substitutions:
  device_name: dehydrator
  friendly_name: Dehydrator

globals:
  id: stop_time
  type: int
  restore_value: no
  initial_value: "0"

esphome:
  on_loop:
    then:
      - lambda: |
          if (id(stop_time) > 0 && id(hass_time).now().timestamp > id(stop_time)) {
            id(relay_copy).turn_off();
          }

number:
  # Configuration
  - platform: template
    name: "Dehydrator Run Hours"
    id: hours
    optimistic: true
    min_value: 0.0
    max_value: 12.0
    step: 0.25
    initial_value: 8.0
    icon: mdi:timer-outline
    entity_category: config


switch:
  # Copy the relay to add automations
  - platform: copy
    id: relay_copy
    name: "$friendly_name Relay Timer"
    internal: true
    source_id: relay
    on_turn_on:
      then: 
        - lambda: |-
            # Test mode
            if (id(hours).state == 0) {
              id(stop_time) = id(hass_time).now().timestamp + 120;
              ESP_LOGD("custom", "Test mode enabled - Dehydrator will stop in 2 minutes");
              return;
            }
            id(stop_time) = id(hass_time).now().timestamp + id(hours).state * 3600;
            ESP_LOGD("custom", "Dehydrator will stop at %d", id(stop_time));

    on_turn_off:
      then:
        - lambda: |-
            id(stop_time) = 0;
        
text_sensor:
  # Human-friendly time remaining sensor
  - platform: template
    name: "Dehydrator Time Remaining"
    update_interval: 60s
    lambda: |-
      if (id(stop_time) == 0) {
        return {"Off"};
      }
      int remaining = id(stop_time) - id(hass_time).now().timestamp;
      if (remaining < 0) {
        return {"Off"};
      }
      int hours = remaining / 3600;
      int minutes = (remaining % 3600) / 60;
      return {hours + ":" + minutes};